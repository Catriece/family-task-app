import { useQuery } from "@tanstack/react-query";
import axios from "axios";

// STANDARD QUERY EXAMPLE NOT ORGANIZED
// Makes reusability of the code more difficult

export default function Countries() {
    // object destructure data
  const {data: countriesResponse, isLoading, isError} = useQuery({
    queryKey: ["countries"],
    queryFn: async () => await axios.get("url-api"),
  });

  // handle conditionals

  // if page is loading, show loading state
  if (isLoading) {
    return <p>Loading...</p>
  }

  // if an error occured
  if(isError) {
    return <p>Something occured...</p>
  }

  // if no data was returned
  if(!countriesResponse) {
    return <p>No data</p>
  }

  // destructure data from response to use in project
  const {data: countries} = countriesResponse

// map or filter through data to use in project
  return (
    <div key={countries.id}>
         <p>countries.name</p>
    </div>

  )
}


// QUERY EXAMPLE ORGANIZED

1. Create Folders (or file) for organization
- Types
export interface Country {
 **interface for HOOKS**
}

- Constants // Keeps Query Keys Consistent
export const COUNTRY_QUERY_KEY = ['KEY_NAME'] // Are '[]' necessary?

- Actions (query executed function)
import axios from 'axios'
import { TYPE } from "types_path"

export default asyn function functionName(): Promise<PromiseShape[]> { // [] necessary if what is coming in is multiple instances of that shape

const {data} = await axios.get('api-url')

return data

} 


- Hooks // where it all comes together
import QUERY KEYs // if these are in index.ts file they can be imported as *
import actions from Actions

export const useName = () => {
  useQuery({
    queryKey: [QUERY_KEY_CONSTANT],
    queryFn: functionName(),
  });
}



// HOW TO USE HOOKS


** EXAMPLE **


Or Organize File by server side modules (or something else)
File.tsx
// CONSTANTS
// TYPES 
// HOOKS

